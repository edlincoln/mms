// Code generated by mockery v2.16.0. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HttpClientMock is an autogenerated mock type for the HttpClient type
type HttpClientMock struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, destination, headers, params
func (_m *HttpClientMock) Get(ctx context.Context, destination string, headers map[string]string, params map[string]string) (*http.Response, error) {
	ret := _m.Called(ctx, destination, headers, params)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, map[string]string) *http.Response); ok {
		r0 = rf(ctx, destination, headers, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, map[string]string) error); ok {
		r1 = rf(ctx, destination, headers, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHttpClientMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewHttpClientMock creates a new instance of HttpClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHttpClientMock(t mockConstructorTestingTNewHttpClientMock) *HttpClientMock {
	mock := &HttpClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
