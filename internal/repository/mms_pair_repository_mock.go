// Code generated by mockery v2.16.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/edlincoln/mms/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockMmsPairRepository is an autogenerated mock type for the MmsPairRepository type
type MockMmsPairRepository struct {
	mock.Mock
}

// BulkSave provides a mock function with given fields: ctx, mmsPairs
func (_m *MockMmsPairRepository) BulkSave(ctx context.Context, mmsPairs []model.MmsPairs) error {
	ret := _m.Called(ctx, mmsPairs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.MmsPairs) error); ok {
		r0 = rf(ctx, mmsPairs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx, pair
func (_m *MockMmsPairRepository) Count(ctx context.Context, pair string) (int, error) {
	ret := _m.Called(ctx, pair)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, pair)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPairAndTimestampRange provides a mock function with given fields: ctx, pair, from, to
func (_m *MockMmsPairRepository) FindByPairAndTimestampRange(ctx context.Context, pair string, from time.Time, to time.Time) ([]model.MmsPairs, error) {
	ret := _m.Called(ctx, pair, from, to)

	var r0 []model.MmsPairs
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) []model.MmsPairs); ok {
		r0 = rf(ctx, pair, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MmsPairs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, pair, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, mmsPair
func (_m *MockMmsPairRepository) Save(ctx context.Context, mmsPair model.MmsPairs) error {
	ret := _m.Called(ctx, mmsPair)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MmsPairs) error); ok {
		r0 = rf(ctx, mmsPair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMmsPairRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMmsPairRepository creates a new instance of MockMmsPairRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMmsPairRepository(t mockConstructorTestingTNewMockMmsPairRepository) *MockMmsPairRepository {
	mock := &MockMmsPairRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
